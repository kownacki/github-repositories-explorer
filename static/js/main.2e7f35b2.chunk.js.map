{"version":3,"sources":["github.js","components/DropdownItem.jsx","components/Dropdown.jsx","redux/actionTypes.js","redux/actions.js","components/SearchResults.jsx","components/App.jsx","redux/store.js","index.jsx"],"names":["getUsers","query","a","fetch","response","status","json","items","getRepos","username","DropdownItem","className","this","props","repo","name","watchers","description","React","Component","Dropdown","state","open","onceOpened","setState","startFetchRepos","userID","github","repos","successFetchRepos","failureFetchRepos","userState","reduxState","users","index","onClick","handleClick","bind","reposStatus","length","map","key","id","connect","type","SearchResults","usersStatus","user","App","searchInputText","startSearchForUsers","successSearchForUsers","login","failureSearchForUsers","placeholder","onInput","event","target","value","disabled","initialState","createStore","action","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.2e7f35b2.chunk.js","sourcesContent":["export const getUsers = async (query) => {\r\n  const response = await fetch(`https://api.github.com/search/users?q=${query}&per_page=5`);\r\n  return response.status === 200 ? (await response.json()).items : false;\r\n};\r\n\r\nexport const getRepos = async (username) => {\r\n  const response = await fetch(`https://api.github.com/users/${username}/repos`);\r\n  return response.status === 200 ? await response.json() : false;\r\n};\r\n","import React from 'react';\r\nimport {AiFillStar} from 'react-icons/ai';\r\n\r\nexport default class DropdownItem extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"dropdown-item\">\r\n        <div className=\"dropdown-item-header\">\r\n          <div className=\"dropdown-item-header-left\">\r\n            {this.props.repo.name}\r\n          </div>\r\n          <div className=\"dropdown-item-header-right\">\r\n            {this.props.repo.watchers} <AiFillStar />\r\n          </div>\r\n        </div>\r\n        <div className=\"dropdown-item-body\">\r\n          {this.props.repo.description}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {AiOutlineDown, AiOutlineUp} from 'react-icons/ai';\r\nimport * as github from '../github.js';\r\nimport DropdownItem from './DropdownItem.jsx';\r\nimport {connect} from 'react-redux';\r\nimport {startFetchRepos, successFetchRepos, failureFetchRepos} from '../redux/actions.js';\r\nimport {LOADING_REPOS, SUCCESS_REPOS, FAILURE_REPOS} from '../redux/actionTypes.js';\r\n\r\nclass Dropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      onceOpened: false,\r\n    }\r\n  }\r\n  handleClick() {\r\n    this.setState((state) => ({open: !state.open}))\r\n  }\r\n  async componentDidUpdate() {\r\n    if (this.state.open && !this.state.onceOpened) {\r\n      this.setState({onceOpened: true});\r\n      this.props.startFetchRepos(this.props.userID);\r\n      const repos = await github.getRepos(this.props.username);\r\n      if (repos) {\r\n        this.props.successFetchRepos(this.props.userID, repos);\r\n      } else {\r\n        this.props.failureFetchRepos(this.props.userID);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const userState = this.props.reduxState.users[this.props.index];\r\n    return (\r\n      <div>\r\n        <div className=\"dropdown-button\" onClick={this.handleClick.bind(this)}>\r\n          <div className=\"dropdown-button-username\">{this.props.username}</div>\r\n          {this.state.open ? <AiOutlineUp /> : <AiOutlineDown />}\r\n        </div>\r\n        {!this.state.open\r\n          ? ''\r\n          : userState.reposStatus === LOADING_REPOS\r\n          ? <div className=\"dropdown-info\">Loading repositories</div>\r\n          : userState.reposStatus === SUCCESS_REPOS\r\n          ? <>\r\n              {userState.repos.length\r\n                ?\r\n                  <ul>\r\n                    {userState.repos.map((repo) =>\r\n                      <li key={repo.id}><DropdownItem repo={repo} /></li>\r\n                    )}\r\n                  </ul>\r\n                :\r\n                 <div className=\"dropdown-info\">No repositories found.</div>\r\n              }\r\n            </>\r\n          : userState.reposStatus === FAILURE_REPOS\r\n          ? <div className=\"dropdown-info\">Something went wrong when fetching data. Try again in a minute</div>\r\n          : ''}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({reduxState: state}),\r\n  {startFetchRepos, successFetchRepos, failureFetchRepos},\r\n)(Dropdown);\r\n","export const NONE = 'NONE';\r\nexport const LOADING_USERS = 'LOADING_USERS';\r\nexport const SUCCESS_USERS = 'SUCCESS_USERS';\r\nexport const FAILURE_USERS = 'FAILURE_USERS';\r\nexport const LOADING_REPOS = 'LOADING_REPOS';\r\nexport const SUCCESS_REPOS = 'SUCCESS_REPOS';\r\nexport const FAILURE_REPOS = 'FAILURE_REPOS';\r\n","import {FAILURE_USERS, LOADING_REPOS, LOADING_USERS, SUCCESS_USERS, SUCCESS_REPOS, FAILURE_REPOS} from './actionTypes.js';\r\n\r\nexport const startSearchForUsers = (query) => ({type: LOADING_USERS, query});\r\nexport const successSearchForUsers = (users) => ({type: SUCCESS_USERS, users});\r\nexport const failureSearchForUsers = () => ({type: FAILURE_USERS});\r\nexport const startFetchRepos = (userID) => ({type: LOADING_REPOS, userID});\r\nexport const successFetchRepos = (userID, repos) => ({type: SUCCESS_REPOS, userID, repos});\r\nexport const failureFetchRepos = (userID) => ({type: FAILURE_REPOS, userID});\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {LOADING_USERS, SUCCESS_USERS, FAILURE_USERS} from '../redux/actionTypes.js';\r\nimport Dropdown from './Dropdown.jsx';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.reduxState.usersStatus === LOADING_USERS\r\n          ? <>Loading users for \"{this.props.reduxState.query}\"</>\r\n          : this.props.reduxState.usersStatus === SUCCESS_USERS\r\n          ? <>\r\n              Showing users for \"{this.props.reduxState.query}\"\r\n              {this.props.reduxState.users.length\r\n                ? (\r\n                <ul>\r\n                  {this.props.reduxState.users.map((user, index) =>\r\n                    <li key={user.id}><Dropdown username={user.name} index={index} userID={user.id} /></li>\r\n                  )}\r\n                </ul>\r\n                )\r\n                : (\r\n                  <div>No user found.</div>\r\n                )\r\n              }\r\n            </>\r\n          : this.props.reduxState.usersStatus === FAILURE_USERS\r\n          ? 'Something went wrong when fetching data. Try again in a minute'\r\n          : ''\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({reduxState: state}), {})(SearchResults);\r\n","import React from 'react';\nimport * as github from '../github.js';\nimport SearchResults from './SearchResults.jsx';\nimport {connect} from 'react-redux';\nimport {failureSearchForUsers, startSearchForUsers, successSearchForUsers} from '../redux/actions.js';\nimport {LOADING_USERS} from '../redux/actionTypes.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputText: '',\n    }\n  }\n  async handleClick() {\n    this.props.startSearchForUsers(this.state.searchInputText);\n    const users = await github.getUsers(this.state.searchInputText);\n    if (users) {\n      this.props.successSearchForUsers(users.map((user) => ({id: user.id, name: user.login})));\n    } else {\n      this.props.failureSearchForUsers();\n    }\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <input\n          className=\"search-input\"\n          placeholder=\"Enter username\"\n          onInput={(event) => this.setState({searchInputText: event.target.value})}\n          type=\"text\"\n        />\n        <button\n          className=\"search-button\"\n          disabled={!this.state.searchInputText || this.props.reduxState.usersStatus === LOADING_USERS}\n          onClick={this.handleClick.bind(this)}\n        >\n          Search\n        </button>\n        <SearchResults />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({reduxState: state}),\n  {startSearchForUsers, successSearchForUsers, failureSearchForUsers},\n)(App);\n","import {createStore} from 'redux';\r\nimport {NONE, LOADING_USERS, SUCCESS_USERS, FAILURE_USERS, LOADING_REPOS, SUCCESS_REPOS, FAILURE_REPOS} from './actionTypes.js';\r\n\r\nconst initialState = {\r\n  usersStatus: NONE,\r\n};\r\n\r\nfunction appReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING_USERS:\r\n      return {\r\n        usersStatus: LOADING_USERS,\r\n        query: action.query,\r\n      };\r\n    case SUCCESS_USERS:\r\n      return {\r\n        usersStatus: SUCCESS_USERS,\r\n        users: action.users,\r\n        query: state.query,\r\n      };\r\n    case FAILURE_USERS:\r\n      return {\r\n        usersStatus: FAILURE_USERS,\r\n      };\r\n    case LOADING_REPOS: {\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => user.id === action.userID ? {\r\n          ...user,\r\n          reposStatus: LOADING_REPOS,\r\n        } : user),\r\n      }\r\n    }\r\n    case SUCCESS_REPOS: {\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => user.id === action.userID ? {\r\n          ...user,\r\n          reposStatus: SUCCESS_REPOS,\r\n          repos: action.repos\r\n        } : user),\r\n      }\r\n    }\r\n    case FAILURE_REPOS: {\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => user.id === action.userID ? {\r\n          ...user,\r\n          reposStatus: FAILURE_REPOS,\r\n        } : user),\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default createStore(appReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from './components/App.jsx';\nimport './index.css';\nimport store from './redux/store.js';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}